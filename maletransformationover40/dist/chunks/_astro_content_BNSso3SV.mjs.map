{"version":3,"file":"_astro_content_BNSso3SV.mjs","sources":["../../node_modules/astro/dist/content/consts.js","../../node_modules/astro/dist/assets/consts.js","../../node_modules/astro/dist/assets/utils/resolveImports.js","../../node_modules/astro/dist/content/data-store.js","../../node_modules/astro/dist/content/runtime.js"],"sourcesContent":["const PROPAGATED_ASSET_FLAG = \"astroPropagatedAssets\";\nconst CONTENT_RENDER_FLAG = \"astroRenderContent\";\nconst CONTENT_FLAG = \"astroContentCollectionEntry\";\nconst DATA_FLAG = \"astroDataCollectionEntry\";\nconst CONTENT_IMAGE_FLAG = \"astroContentImageFlag\";\nconst CONTENT_MODULE_FLAG = \"astroContentModuleFlag\";\nconst VIRTUAL_MODULE_ID = \"astro:content\";\nconst RESOLVED_VIRTUAL_MODULE_ID = \"\\0\" + VIRTUAL_MODULE_ID;\nconst DATA_STORE_VIRTUAL_ID = \"astro:data-layer-content\";\nconst RESOLVED_DATA_STORE_VIRTUAL_ID = \"\\0\" + DATA_STORE_VIRTUAL_ID;\nconst MODULES_MJS_ID = \"astro:content-module-imports\";\nconst MODULES_MJS_VIRTUAL_ID = \"\\0\" + MODULES_MJS_ID;\nconst DEFERRED_MODULE = \"astro:content-layer-deferred-module\";\nconst ASSET_IMPORTS_VIRTUAL_ID = \"astro:asset-imports\";\nconst ASSET_IMPORTS_RESOLVED_STUB_ID = \"\\0\" + ASSET_IMPORTS_VIRTUAL_ID;\nconst LINKS_PLACEHOLDER = \"@@ASTRO-LINKS@@\";\nconst STYLES_PLACEHOLDER = \"@@ASTRO-STYLES@@\";\nconst IMAGE_IMPORT_PREFIX = \"__ASTRO_IMAGE_\";\nconst CONTENT_FLAGS = [\n  CONTENT_FLAG,\n  CONTENT_RENDER_FLAG,\n  DATA_FLAG,\n  PROPAGATED_ASSET_FLAG,\n  CONTENT_IMAGE_FLAG,\n  CONTENT_MODULE_FLAG\n];\nconst CONTENT_TYPES_FILE = \"content.d.ts\";\nconst DATA_STORE_FILE = \"data-store.json\";\nconst ASSET_IMPORTS_FILE = \"content-assets.mjs\";\nconst MODULES_IMPORTS_FILE = \"content-modules.mjs\";\nconst COLLECTIONS_MANIFEST_FILE = \"collections/collections.json\";\nconst COLLECTIONS_DIR = \"collections/\";\nconst CONTENT_LAYER_TYPE = \"content_layer\";\nexport {\n  ASSET_IMPORTS_FILE,\n  ASSET_IMPORTS_RESOLVED_STUB_ID,\n  ASSET_IMPORTS_VIRTUAL_ID,\n  COLLECTIONS_DIR,\n  COLLECTIONS_MANIFEST_FILE,\n  CONTENT_FLAG,\n  CONTENT_FLAGS,\n  CONTENT_IMAGE_FLAG,\n  CONTENT_LAYER_TYPE,\n  CONTENT_MODULE_FLAG,\n  CONTENT_RENDER_FLAG,\n  CONTENT_TYPES_FILE,\n  DATA_FLAG,\n  DATA_STORE_FILE,\n  DATA_STORE_VIRTUAL_ID,\n  DEFERRED_MODULE,\n  IMAGE_IMPORT_PREFIX,\n  LINKS_PLACEHOLDER,\n  MODULES_IMPORTS_FILE,\n  MODULES_MJS_ID,\n  MODULES_MJS_VIRTUAL_ID,\n  PROPAGATED_ASSET_FLAG,\n  RESOLVED_DATA_STORE_VIRTUAL_ID,\n  RESOLVED_VIRTUAL_MODULE_ID,\n  STYLES_PLACEHOLDER,\n  VIRTUAL_MODULE_ID\n};\n","const VIRTUAL_MODULE_ID = \"astro:assets\";\nconst VIRTUAL_SERVICE_ID = \"virtual:image-service\";\nconst VALID_INPUT_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst VALID_SUPPORTED_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst DEFAULT_OUTPUT_FORMAT = \"webp\";\nconst VALID_OUTPUT_FORMATS = [\"avif\", \"png\", \"webp\", \"jpeg\", \"jpg\", \"svg\"];\nconst DEFAULT_HASH_PROPS = [\n  \"src\",\n  \"width\",\n  \"height\",\n  \"format\",\n  \"quality\",\n  \"fit\",\n  \"position\"\n];\nexport {\n  DEFAULT_HASH_PROPS,\n  DEFAULT_OUTPUT_FORMAT,\n  VALID_INPUT_FORMATS,\n  VALID_OUTPUT_FORMATS,\n  VALID_SUPPORTED_FORMATS,\n  VIRTUAL_MODULE_ID,\n  VIRTUAL_SERVICE_ID\n};\n","import { isRemotePath, removeBase } from \"@astrojs/internal-helpers/path\";\nimport { CONTENT_IMAGE_FLAG, IMAGE_IMPORT_PREFIX } from \"../../content/consts.js\";\nimport { shorthash } from \"../../runtime/server/shorthash.js\";\nimport { VALID_INPUT_FORMATS } from \"../consts.js\";\nfunction imageSrcToImportId(imageSrc, filePath) {\n  imageSrc = removeBase(imageSrc, IMAGE_IMPORT_PREFIX);\n  if (isRemotePath(imageSrc)) {\n    return;\n  }\n  const ext = imageSrc.split(\".\").at(-1)?.toLowerCase();\n  if (!ext || !VALID_INPUT_FORMATS.includes(ext)) {\n    return;\n  }\n  const params = new URLSearchParams(CONTENT_IMAGE_FLAG);\n  if (filePath) {\n    params.set(\"importer\", filePath);\n  }\n  return `${imageSrc}?${params.toString()}`;\n}\nconst importIdToSymbolName = (importId) => `__ASTRO_IMAGE_IMPORT_${shorthash(importId)}`;\nexport {\n  imageSrcToImportId,\n  importIdToSymbolName\n};\n","import * as devalue from \"devalue\";\nclass ImmutableDataStore {\n  _collections = /* @__PURE__ */ new Map();\n  constructor() {\n    this._collections = /* @__PURE__ */ new Map();\n  }\n  get(collectionName, key) {\n    return this._collections.get(collectionName)?.get(String(key));\n  }\n  entries(collectionName) {\n    const collection = this._collections.get(collectionName) ?? /* @__PURE__ */ new Map();\n    return [...collection.entries()];\n  }\n  values(collectionName) {\n    const collection = this._collections.get(collectionName) ?? /* @__PURE__ */ new Map();\n    return [...collection.values()];\n  }\n  keys(collectionName) {\n    const collection = this._collections.get(collectionName) ?? /* @__PURE__ */ new Map();\n    return [...collection.keys()];\n  }\n  has(collectionName, key) {\n    const collection = this._collections.get(collectionName);\n    if (collection) {\n      return collection.has(String(key));\n    }\n    return false;\n  }\n  hasCollection(collectionName) {\n    return this._collections.has(collectionName);\n  }\n  collections() {\n    return this._collections;\n  }\n  /**\n   * Attempts to load a DataStore from the virtual module.\n   * This only works in Vite.\n   */\n  static async fromModule() {\n    try {\n      const data = await import(\"astro:data-layer-content\");\n      if (data.default instanceof Map) {\n        return ImmutableDataStore.fromMap(data.default);\n      }\n      const map = devalue.unflatten(data.default);\n      return ImmutableDataStore.fromMap(map);\n    } catch {\n    }\n    return new ImmutableDataStore();\n  }\n  static async fromMap(data) {\n    const store = new ImmutableDataStore();\n    store._collections = data;\n    return store;\n  }\n}\nfunction dataStoreSingleton() {\n  let instance = void 0;\n  return {\n    get: async () => {\n      if (!instance) {\n        instance = ImmutableDataStore.fromModule();\n      }\n      return instance;\n    },\n    set: (store) => {\n      instance = store;\n    }\n  };\n}\nconst globalDataStore = dataStoreSingleton();\nexport {\n  ImmutableDataStore,\n  globalDataStore\n};\n","import { Traverse } from \"neotraverse/modern\";\nimport pLimit from \"p-limit\";\nimport { ZodIssueCode, z } from \"zod\";\nimport { imageSrcToImportId } from \"../assets/utils/resolveImports.js\";\nimport { AstroError, AstroErrorData, AstroUserError } from \"../core/errors/index.js\";\nimport { prependForwardSlash } from \"../core/path.js\";\nimport {\n  createComponent,\n  createHeadAndContent,\n  renderComponent,\n  renderScriptElement,\n  renderTemplate,\n  renderUniqueStylesheet,\n  render as serverRender,\n  unescapeHTML\n} from \"../runtime/server/index.js\";\nimport { CONTENT_LAYER_TYPE, IMAGE_IMPORT_PREFIX } from \"./consts.js\";\nimport { globalDataStore } from \"./data-store.js\";\nfunction getImporterFilename() {\n  const stackLine = new Error().stack?.split(\"\\n\")?.[3];\n  if (!stackLine) {\n    return null;\n  }\n  const match = /\\/(src\\/.*?):\\d+:\\d+/.exec(stackLine);\n  return match?.[1] ?? null;\n}\nfunction defineCollection(config) {\n  if (\"loader\" in config) {\n    if (config.type && config.type !== CONTENT_LAYER_TYPE) {\n      throw new AstroUserError(\n        `Collections that use the Content Layer API must have a \\`loader\\` defined and no \\`type\\` set. Check your collection definitions in ${getImporterFilename() ?? \"your content config file\"}.`\n      );\n    }\n    config.type = CONTENT_LAYER_TYPE;\n  }\n  if (!config.type) config.type = \"content\";\n  return config;\n}\nfunction createCollectionToGlobResultMap({\n  globResult,\n  contentDir\n}) {\n  const collectionToGlobResultMap = {};\n  for (const key in globResult) {\n    const keyRelativeToContentDir = key.replace(new RegExp(`^${contentDir}`), \"\");\n    const segments = keyRelativeToContentDir.split(\"/\");\n    if (segments.length <= 1) continue;\n    const collection = segments[0];\n    collectionToGlobResultMap[collection] ??= {};\n    collectionToGlobResultMap[collection][key] = globResult[key];\n  }\n  return collectionToGlobResultMap;\n}\nfunction createGetCollection({\n  contentCollectionToEntryMap,\n  dataCollectionToEntryMap,\n  getRenderEntryImport,\n  cacheEntriesByCollection\n}) {\n  return async function getCollection(collection, filter) {\n    const hasFilter = typeof filter === \"function\";\n    const store = await globalDataStore.get();\n    let type;\n    if (collection in contentCollectionToEntryMap) {\n      type = \"content\";\n    } else if (collection in dataCollectionToEntryMap) {\n      type = \"data\";\n    } else if (store.hasCollection(collection)) {\n      const { default: imageAssetMap } = await import(\"astro:asset-imports\");\n      const result = [];\n      for (const rawEntry of store.values(collection)) {\n        const data = updateImageReferencesInData(rawEntry.data, rawEntry.filePath, imageAssetMap);\n        const entry = {\n          ...rawEntry,\n          data,\n          collection\n        };\n        if (hasFilter && !filter(entry)) {\n          continue;\n        }\n        result.push(entry.legacyId ? emulateLegacyEntry(entry) : entry);\n      }\n      return result;\n    } else {\n      console.warn(\n        `The collection ${JSON.stringify(\n          collection\n        )} does not exist or is empty. Ensure a collection directory with this name exists.`\n      );\n      return [];\n    }\n    const lazyImports = Object.values(\n      type === \"content\" ? contentCollectionToEntryMap[collection] : dataCollectionToEntryMap[collection]\n    );\n    let entries = [];\n    if (!import.meta.env?.DEV && cacheEntriesByCollection.has(collection)) {\n      entries = cacheEntriesByCollection.get(collection);\n    } else {\n      const limit = pLimit(10);\n      entries = await Promise.all(\n        lazyImports.map(\n          (lazyImport) => limit(async () => {\n            const entry = await lazyImport();\n            return type === \"content\" ? {\n              id: entry.id,\n              slug: entry.slug,\n              body: entry.body,\n              collection: entry.collection,\n              data: entry.data,\n              async render() {\n                return render({\n                  collection: entry.collection,\n                  id: entry.id,\n                  renderEntryImport: await getRenderEntryImport(collection, entry.slug)\n                });\n              }\n            } : {\n              id: entry.id,\n              collection: entry.collection,\n              data: entry.data\n            };\n          })\n        )\n      );\n      cacheEntriesByCollection.set(collection, entries);\n    }\n    if (hasFilter) {\n      return entries.filter(filter);\n    } else {\n      return entries.slice();\n    }\n  };\n}\nfunction createGetEntryBySlug({\n  getEntryImport,\n  getRenderEntryImport,\n  collectionNames,\n  getEntry\n}) {\n  return async function getEntryBySlug(collection, slug) {\n    const store = await globalDataStore.get();\n    if (!collectionNames.has(collection)) {\n      if (store.hasCollection(collection)) {\n        const entry2 = await getEntry(collection, slug);\n        if (entry2 && \"slug\" in entry2) {\n          return entry2;\n        }\n        throw new AstroError({\n          ...AstroErrorData.GetEntryDeprecationError,\n          message: AstroErrorData.GetEntryDeprecationError.message(collection, \"getEntryBySlug\")\n        });\n      }\n      console.warn(\n        `The collection ${JSON.stringify(collection)} does not exist. Please ensure it is defined in your content config.`\n      );\n      return void 0;\n    }\n    const entryImport = await getEntryImport(collection, slug);\n    if (typeof entryImport !== \"function\") return void 0;\n    const entry = await entryImport();\n    return {\n      id: entry.id,\n      slug: entry.slug,\n      body: entry.body,\n      collection: entry.collection,\n      data: entry.data,\n      async render() {\n        return render({\n          collection: entry.collection,\n          id: entry.id,\n          renderEntryImport: await getRenderEntryImport(collection, slug)\n        });\n      }\n    };\n  };\n}\nfunction createGetDataEntryById({\n  getEntryImport,\n  collectionNames,\n  getEntry\n}) {\n  return async function getDataEntryById(collection, id) {\n    const store = await globalDataStore.get();\n    if (!collectionNames.has(collection)) {\n      if (store.hasCollection(collection)) {\n        return getEntry(collection, id);\n      }\n      console.warn(\n        `The collection ${JSON.stringify(collection)} does not exist. Please ensure it is defined in your content config.`\n      );\n      return void 0;\n    }\n    const lazyImport = await getEntryImport(collection, id);\n    if (!lazyImport) throw new Error(`Entry ${collection} \\u2192 ${id} was not found.`);\n    const entry = await lazyImport();\n    return {\n      id: entry.id,\n      collection: entry.collection,\n      data: entry.data\n    };\n  };\n}\nfunction emulateLegacyEntry(entry) {\n  const legacyEntry = {\n    ...entry,\n    id: entry.legacyId,\n    slug: entry.id\n  };\n  delete legacyEntry.legacyId;\n  return {\n    ...legacyEntry,\n    // Define separately so the render function isn't included in the object passed to `renderEntry()`\n    render: () => renderEntry(legacyEntry)\n  };\n}\nfunction createGetEntry({\n  getEntryImport,\n  getRenderEntryImport,\n  collectionNames\n}) {\n  return async function getEntry(collectionOrLookupObject, _lookupId) {\n    let collection, lookupId;\n    if (typeof collectionOrLookupObject === \"string\") {\n      collection = collectionOrLookupObject;\n      if (!_lookupId)\n        throw new AstroError({\n          ...AstroErrorData.UnknownContentCollectionError,\n          message: \"`getEntry()` requires an entry identifier as the second argument.\"\n        });\n      lookupId = _lookupId;\n    } else {\n      collection = collectionOrLookupObject.collection;\n      lookupId = \"id\" in collectionOrLookupObject ? collectionOrLookupObject.id : collectionOrLookupObject.slug;\n    }\n    const store = await globalDataStore.get();\n    if (store.hasCollection(collection)) {\n      const entry2 = store.get(collection, lookupId);\n      if (!entry2) {\n        console.warn(`Entry ${collection} \\u2192 ${lookupId} was not found.`);\n        return;\n      }\n      const { default: imageAssetMap } = await import(\"astro:asset-imports\");\n      entry2.data = updateImageReferencesInData(entry2.data, entry2.filePath, imageAssetMap);\n      if (entry2.legacyId) {\n        return { ...emulateLegacyEntry(entry2), collection };\n      }\n      return {\n        ...entry2,\n        collection\n      };\n    }\n    if (!collectionNames.has(collection)) {\n      console.warn(\n        `The collection ${JSON.stringify(collection)} does not exist. Please ensure it is defined in your content config.`\n      );\n      return void 0;\n    }\n    const entryImport = await getEntryImport(collection, lookupId);\n    if (typeof entryImport !== \"function\") return void 0;\n    const entry = await entryImport();\n    if (entry._internal.type === \"content\") {\n      return {\n        id: entry.id,\n        slug: entry.slug,\n        body: entry.body,\n        collection: entry.collection,\n        data: entry.data,\n        async render() {\n          return render({\n            collection: entry.collection,\n            id: entry.id,\n            renderEntryImport: await getRenderEntryImport(collection, lookupId)\n          });\n        }\n      };\n    } else if (entry._internal.type === \"data\") {\n      return {\n        id: entry.id,\n        collection: entry.collection,\n        data: entry.data\n      };\n    }\n    return void 0;\n  };\n}\nfunction createGetEntries(getEntry) {\n  return async function getEntries(entries) {\n    return Promise.all(entries.map((e) => getEntry(e)));\n  };\n}\nconst CONTENT_LAYER_IMAGE_REGEX = /__ASTRO_IMAGE_=\"([^\"]+)\"/g;\nasync function updateImageReferencesInBody(html, fileName) {\n  const { default: imageAssetMap } = await import(\"astro:asset-imports\");\n  const imageObjects = /* @__PURE__ */ new Map();\n  const { getImage } = await import(\"astro:assets\");\n  for (const [_full, imagePath] of html.matchAll(CONTENT_LAYER_IMAGE_REGEX)) {\n    try {\n      const decodedImagePath = JSON.parse(imagePath.replaceAll(\"&#x22;\", '\"'));\n      const id = imageSrcToImportId(decodedImagePath.src, fileName);\n      const imported = imageAssetMap.get(id);\n      if (!id || imageObjects.has(id) || !imported) {\n        continue;\n      }\n      const image = await getImage({ ...decodedImagePath, src: imported });\n      imageObjects.set(imagePath, image);\n    } catch {\n      throw new Error(`Failed to parse image reference: ${imagePath}`);\n    }\n  }\n  return html.replaceAll(CONTENT_LAYER_IMAGE_REGEX, (full, imagePath) => {\n    const image = imageObjects.get(imagePath);\n    if (!image) {\n      return full;\n    }\n    const { index, ...attributes } = image.attributes;\n    return Object.entries({\n      ...attributes,\n      src: image.src,\n      srcset: image.srcSet.attribute\n    }).map(([key, value]) => value ? `${key}=${JSON.stringify(String(value))}` : \"\").join(\" \");\n  });\n}\nfunction updateImageReferencesInData(data, fileName, imageAssetMap) {\n  return new Traverse(data).map(function(ctx, val) {\n    if (typeof val === \"string\" && val.startsWith(IMAGE_IMPORT_PREFIX)) {\n      const src = val.replace(IMAGE_IMPORT_PREFIX, \"\");\n      const id = imageSrcToImportId(src, fileName);\n      if (!id) {\n        ctx.update(src);\n        return;\n      }\n      const imported = imageAssetMap?.get(id);\n      if (imported) {\n        ctx.update(imported);\n      } else {\n        ctx.update(src);\n      }\n    }\n  });\n}\nasync function renderEntry(entry) {\n  if (!entry) {\n    throw new AstroError(AstroErrorData.RenderUndefinedEntryError);\n  }\n  if (\"render\" in entry && !(\"legacyId\" in entry)) {\n    return entry.render();\n  }\n  if (entry.deferredRender) {\n    try {\n      const { default: contentModules } = await import(\"astro:content-module-imports\");\n      const renderEntryImport = contentModules.get(entry.filePath);\n      return render({\n        collection: \"\",\n        id: entry.id,\n        renderEntryImport\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  const html = entry?.rendered?.metadata?.imagePaths?.length && entry.filePath ? await updateImageReferencesInBody(entry.rendered.html, entry.filePath) : entry?.rendered?.html;\n  const Content = createComponent(() => serverRender`${unescapeHTML(html)}`);\n  return {\n    Content,\n    headings: entry?.rendered?.metadata?.headings ?? [],\n    remarkPluginFrontmatter: entry?.rendered?.metadata?.frontmatter ?? {}\n  };\n}\nasync function render({\n  collection,\n  id,\n  renderEntryImport\n}) {\n  const UnexpectedRenderError = new AstroError({\n    ...AstroErrorData.UnknownContentCollectionError,\n    message: `Unexpected error while rendering ${String(collection)} \\u2192 ${String(id)}.`\n  });\n  if (typeof renderEntryImport !== \"function\") throw UnexpectedRenderError;\n  const baseMod = await renderEntryImport();\n  if (baseMod == null || typeof baseMod !== \"object\") throw UnexpectedRenderError;\n  const { default: defaultMod } = baseMod;\n  if (isPropagatedAssetsModule(defaultMod)) {\n    const { collectedStyles, collectedLinks, collectedScripts, getMod } = defaultMod;\n    if (typeof getMod !== \"function\") throw UnexpectedRenderError;\n    const propagationMod = await getMod();\n    if (propagationMod == null || typeof propagationMod !== \"object\") throw UnexpectedRenderError;\n    const Content = createComponent({\n      factory(result, baseProps, slots) {\n        let styles = \"\", links = \"\", scripts = \"\";\n        if (Array.isArray(collectedStyles)) {\n          styles = collectedStyles.map((style) => {\n            return renderUniqueStylesheet(result, {\n              type: \"inline\",\n              content: style\n            });\n          }).join(\"\");\n        }\n        if (Array.isArray(collectedLinks)) {\n          links = collectedLinks.map((link) => {\n            return renderUniqueStylesheet(result, {\n              type: \"external\",\n              src: prependForwardSlash(link)\n            });\n          }).join(\"\");\n        }\n        if (Array.isArray(collectedScripts)) {\n          scripts = collectedScripts.map((script) => renderScriptElement(script)).join(\"\");\n        }\n        let props = baseProps;\n        if (id.endsWith(\"mdx\")) {\n          props = {\n            components: propagationMod.components ?? {},\n            ...baseProps\n          };\n        }\n        return createHeadAndContent(\n          unescapeHTML(styles + links + scripts),\n          renderTemplate`${renderComponent(\n            result,\n            \"Content\",\n            propagationMod.Content,\n            props,\n            slots\n          )}`\n        );\n      },\n      propagation: \"self\"\n    });\n    return {\n      Content,\n      headings: propagationMod.getHeadings?.() ?? [],\n      remarkPluginFrontmatter: propagationMod.frontmatter ?? {}\n    };\n  } else if (baseMod.Content && typeof baseMod.Content === \"function\") {\n    return {\n      Content: baseMod.Content,\n      headings: baseMod.getHeadings?.() ?? [],\n      remarkPluginFrontmatter: baseMod.frontmatter ?? {}\n    };\n  } else {\n    throw UnexpectedRenderError;\n  }\n}\nfunction createReference({ lookupMap }) {\n  return function reference(collection) {\n    return z.union([\n      z.string(),\n      z.object({\n        id: z.string(),\n        collection: z.string()\n      }),\n      z.object({\n        slug: z.string(),\n        collection: z.string()\n      })\n    ]).transform(\n      async (lookup, ctx) => {\n        const flattenedErrorPath = ctx.path.join(\".\");\n        const store = await globalDataStore.get();\n        const collectionIsInStore = store.hasCollection(collection);\n        if (typeof lookup === \"object\") {\n          if (lookup.collection !== collection) {\n            ctx.addIssue({\n              code: ZodIssueCode.custom,\n              message: `**${flattenedErrorPath}**: Reference to ${collection} invalid. Expected ${collection}. Received ${lookup.collection}.`\n            });\n            return;\n          }\n          return lookup;\n        }\n        if (collectionIsInStore) {\n          const entry2 = store.get(collection, lookup);\n          if (!entry2) {\n            ctx.addIssue({\n              code: ZodIssueCode.custom,\n              message: `**${flattenedErrorPath}**: Reference to ${collection} invalid. Entry ${lookup} does not exist.`\n            });\n            return;\n          }\n          return { id: lookup, collection };\n        }\n        if (!lookupMap[collection] && store.collections().size <= 1) {\n          return { id: lookup, collection };\n        }\n        const { type, entries } = lookupMap[collection];\n        const entry = entries[lookup];\n        if (!entry) {\n          ctx.addIssue({\n            code: ZodIssueCode.custom,\n            message: `**${flattenedErrorPath}**: Reference to ${collection} invalid. Expected ${Object.keys(\n              entries\n            ).map((c) => JSON.stringify(c)).join(\" | \")}. Received ${JSON.stringify(lookup)}.`\n          });\n          return;\n        }\n        if (type === \"content\") {\n          return { slug: lookup, collection };\n        }\n        return { id: lookup, collection };\n      }\n    );\n  };\n}\nfunction isPropagatedAssetsModule(module) {\n  return typeof module === \"object\" && module != null && \"__astroPropagation\" in module;\n}\nexport {\n  createCollectionToGlobResultMap,\n  createGetCollection,\n  createGetDataEntryById,\n  createGetEntries,\n  createGetEntry,\n  createGetEntryBySlug,\n  createReference,\n  defineCollection,\n  getImporterFilename,\n  renderEntry\n};\n"],"names":["AstroErrorData.RenderUndefinedEntryError","serverRender","AstroErrorData.UnknownContentCollectionError"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}