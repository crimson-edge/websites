{"version":3,"file":"Layout_D81kiRMr.mjs","sources":["../../node_modules/astro/components/ClientRouter.astro","../../src/layouts/Layout.astro"],"sourcesContent":["---\ntype Fallback = 'none' | 'animate' | 'swap';\n\nexport interface Props {\n\tfallback?: Fallback;\n\t/** @deprecated handleForms is enabled by default in Astro 4.0\n\t *\n\t * Set `data-astro-reload` on your form to opt-out of the default behavior.\n\t */\n\thandleForms?: boolean;\n}\n\nconst { fallback = 'animate' } = Astro.props;\n---\n\n<style is:global>\n\t/* Route announcer */\n\t.astro-route-announcer {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tclip: rect(0 0 0 0);\n\t\tclip-path: inset(50%);\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\twidth: 1px;\n\t\theight: 1px;\n\t}\n</style>\n<meta name=\"astro-view-transitions-enabled\" content=\"true\" />\n<meta name=\"astro-view-transitions-fallback\" content={fallback} />\n<script>\n\timport type { Options } from 'astro:transitions/client';\n\timport { supportsViewTransitions, navigate } from 'astro:transitions/client';\n\t// NOTE: import from `astro/virtual-modules/prefetch.js` as `astro:prefetch` requires the `prefetch` config to be enabled\n\t// @ts-ignore\n\timport { init } from 'astro/virtual-modules/prefetch.js';\n\n\ttype Fallback = 'none' | 'animate' | 'swap';\n\n\tfunction getFallback(): Fallback {\n\t\tconst el = document.querySelector('[name=\"astro-view-transitions-fallback\"]');\n\t\tif (el) {\n\t\t\treturn el.getAttribute('content') as Fallback;\n\t\t}\n\t\treturn 'animate';\n\t}\n\n\tfunction isReloadEl(el: HTMLElement | SVGAElement): boolean {\n\t\treturn el.dataset.astroReload !== undefined;\n\t}\n\n\tif (supportsViewTransitions || getFallback() !== 'none') {\n\t\tif (import.meta.env.DEV && window.matchMedia('(prefers-reduced-motion)').matches) {\n\t\t\tconsole.warn(\n\t\t\t\t`[transitions]: all view transition animations, including fallback animation, are disabled as this device has the prefer-reduced-motion setting enabled.`,\n\t\t\t);\n\t\t}\n\t\tdocument.addEventListener('click', (ev) => {\n\t\t\tlet link = ev.target;\n\t\t\tif (ev.composed) {\n\t\t\t\tlink = ev.composedPath()[0];\n\t\t\t}\n\t\t\tif (link instanceof Element) {\n\t\t\t\tlink = link.closest('a, area');\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!(link instanceof HTMLAnchorElement) &&\n\t\t\t\t!(link instanceof SVGAElement) &&\n\t\t\t\t!(link instanceof HTMLAreaElement)\n\t\t\t)\n\t\t\t\treturn;\n\t\t\t// This check verifies that the click is happening on an anchor\n\t\t\t// that is going to another page within the same origin. Basically it determines\n\t\t\t// same-origin navigation, but omits special key combos for new tabs, etc.\n\t\t\tconst linkTarget = link instanceof HTMLElement ? link.target : link.target.baseVal;\n\t\t\tconst href = link instanceof HTMLElement ? link.href : link.href.baseVal;\n\t\t\tconst origin = new URL(href, location.href).origin;\n\t\t\tif (\n\t\t\t\tisReloadEl(link) ||\n\t\t\t\tlink.hasAttribute('download') ||\n\t\t\t\t!link.href ||\n\t\t\t\t(linkTarget && linkTarget !== '_self') ||\n\t\t\t\torigin !== location.origin ||\n\t\t\t\tev.button !== 0 || // left clicks only\n\t\t\t\tev.metaKey || // new tab (mac)\n\t\t\t\tev.ctrlKey || // new tab (windows)\n\t\t\t\tev.altKey || // download\n\t\t\t\tev.shiftKey || // new window\n\t\t\t\tev.defaultPrevented\n\t\t\t) {\n\t\t\t\t// No page transitions in these cases,\n\t\t\t\t// Let the browser standard action handle this\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tev.preventDefault();\n\t\t\tnavigate(href, {\n\t\t\t\thistory: link.dataset.astroHistory === 'replace' ? 'replace' : 'auto',\n\t\t\t\tsourceElement: link,\n\t\t\t});\n\t\t});\n\n\t\tdocument.addEventListener('submit', (ev) => {\n\t\t\tlet el = ev.target as HTMLElement;\n\t\t\tif (el.tagName !== 'FORM' || ev.defaultPrevented || isReloadEl(el)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst form = el as HTMLFormElement;\n\t\t\tconst submitter = ev.submitter;\n\t\t\tconst formData = new FormData(form, submitter);\n\t\t\t// form.action and form.method can point to an <input name=\"action\"> or <input name=\"method\">\n\t\t\t// in which case should fallback to the form attribute\n\t\t\tconst formAction =\n\t\t\t\ttypeof form.action === 'string' ? form.action : form.getAttribute('action');\n\t\t\tconst formMethod =\n\t\t\t\ttypeof form.method === 'string' ? form.method : form.getAttribute('method');\n\t\t\t// Use the form action, if defined, otherwise fallback to current path.\n\t\t\tlet action = submitter?.getAttribute('formaction') ?? formAction ?? location.pathname;\n\t\t\t// Use the form method, if defined, otherwise fallback to \"get\"\n\t\t\tconst method = submitter?.getAttribute('formmethod') ?? formMethod ?? 'get';\n\n\t\t\t// the \"dialog\" method is a special keyword used within <dialog> elements\n\t\t\t// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fs-method\n\t\t\tif (method === 'dialog' || location.origin !== new URL(action, location.href).origin) {\n\t\t\t\t// No page transitions in these cases,\n\t\t\t\t// Let the browser standard action handle this\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst options: Options = { sourceElement: submitter ?? form };\n\t\t\tif (method === 'get') {\n\t\t\t\tconst params = new URLSearchParams(formData as any);\n\t\t\t\tconst url = new URL(action);\n\t\t\t\turl.search = params.toString();\n\t\t\t\taction = url.toString();\n\t\t\t} else {\n\t\t\t\toptions.formData = formData;\n\t\t\t}\n\n\t\t\tev.preventDefault();\n\t\t\tnavigate(action, options);\n\t\t});\n\n\t\t// @ts-expect-error injected by vite-plugin-transitions for treeshaking\n\t\tif (!__PREFETCH_DISABLED__) {\n\t\t\tinit({ prefetchAll: true });\n\t\t}\n\t}\n</script>\n","---\nimport { ViewTransitions } from 'astro:transitions';\n\ninterface Props {\n  title: string;\n}\n\nconst { title } = Astro.props;\n---\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"description\" content=\"Male Transformation Over 40\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{title}</title>\n    <ViewTransitions />\n  </head>\n  <body class=\"bg-white text-gray-900\">\n    <slot />\n  </body>\n</html>\n\n<style is:global>\n  .prose {\n    @apply text-gray-900 max-w-none;\n  }\n  .prose h1 {\n    @apply text-4xl font-bold mb-8 text-gray-900;\n  }\n  .prose h2 {\n    @apply text-2xl font-bold mt-8 mb-4 text-gray-900;\n  }\n  .prose h3 {\n    @apply text-xl font-semibold mt-6 mb-3 text-gray-900;\n  }\n  .prose p {\n    @apply mb-4 text-gray-900 leading-relaxed;\n  }\n  .prose ul {\n    @apply list-disc pl-6 mb-4 text-gray-900;\n  }\n  .prose ol {\n    @apply list-decimal pl-6 mb-4 text-gray-900;\n  }\n  .prose a {\n    @apply text-blue-600 hover:underline;\n  }\n  .prose img {\n    @apply my-8 rounded-lg mx-auto;\n  }\n</style>\n"],"names":["$$createComponent","Astro","$$Astro","$$render","$$addAttribute","$$renderScript","$$createAstro","$$renderComponent","ViewTransitions","$$renderHead","$$renderSlot"],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAAA,eAAA,CAAA,CAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAAA,EAAA,MAAAC,MAAA,GAAA,QAAA,CAAA,WAAA,CAAAC,SAAA,EAAA,SAAA,OAAA,CAAA;AAAA,EAAAD,OAAA,IAAA,GAAA,cAAA;AAYA,EAAA,MAAM,EAAE,QAAA,GAAW,SAAU,EAAA,GAAIA,MAAM,CAAA,KAAA;AAZvC,EAAA,OAAAE,cAAA,CAAA,uGAAA,EAAAC,aA8BsD,QA9BtD,EAAA,SAAA,CAAA,CA+BC,CAAA,EAAAC,YAAA,CAAA,QAAA,EAAA,yIAAA,CAAA,CAAA,CAAA;AA/BD,CAAA,EAAA,yGAAA,KAAA,CAAA,CAAA;;ACAA,MAAA,OAAA,GAAAC,YAAA,+BAAA,CAAA;AAAA,MAAA,QAAA,GAAAN,eAAA,CAAA,CAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAAA,EAAA,MAAAC,MAAA,GAAA,QAAA,CAAA,WAAA,CAAA,OAAA,EAAA,SAAA,OAAA,CAAA;AAAA,EAAAA,OAAA,IAAA,GAAA,QAAA;AAOA,EAAM,MAAA,EAAE,KAAM,EAAA,GAAIA,MAAM,CAAA,KAAA;AAPxB,EAAA,OAAAE,cAAA,CAAA,+OAAA,EAAAC,YAiBoCH,CAAAA,MAAAA,CAAM,SAjB1C,EAAA,SAAA,CAAA,CAAA,QAAA,EAkBY,KAAK,CAAA,QAAA,EAlBjBM,eAAA,CAAA,QAAA,EAAA,iBAAA,EAAAC,cAAA,EAAA,EAmBK,CAAA,CAnBL,EAAAC,UAAA,CAAA,CAAA,CAAA,8CAAA,EAAAC,UAAA,CAAA,QAAA,EAAA,OAAA,CAAA,SAAA,CAsBK,CAAA,CAAA,eAAA,CAAA;AAtBL,CAAA,EAAA,iFAAA,KAAA,CAAA;;;;","x_google_ignoreList":[0]}