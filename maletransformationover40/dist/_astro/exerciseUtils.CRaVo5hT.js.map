{"version":3,"file":"exerciseUtils.CRaVo5hT.js","sources":["../../src/utils/exerciseUtils.ts"],"sourcesContent":["interface JointStatus {\n  mobility: number;\n  pain: number;\n  strength: number;\n}\n\ninterface ExerciseRecommendation {\n  name: string;\n  difficulty: string;\n  description: string;\n  benefits: string[];\n  precautions?: string[];\n  alternatives?: string[];\n}\n\nexport const assessMobility = (\n  shoulderMobility: number,\n  hipMobility: number,\n  ankleMobility: number,\n  spinalMobility: number\n): { score: number; recommendations: string[] } => {\n  const totalScore = (shoulderMobility + hipMobility + ankleMobility + spinalMobility) / 4;\n  const recommendations: string[] = [];\n\n  if (shoulderMobility < 7) {\n    recommendations.push(\"Focus on shoulder mobility work: Wall slides, arm circles, band pull-aparts\");\n  }\n  if (hipMobility < 7) {\n    recommendations.push(\"Improve hip mobility: Hip flexor stretches, 90/90 stretches, deep squats\");\n  }\n  if (ankleMobility < 7) {\n    recommendations.push(\"Work on ankle mobility: Calf stretches, ankle rotations, wall ankle mobilization\");\n  }\n  if (spinalMobility < 7) {\n    recommendations.push(\"Enhance spine mobility: Cat-cow stretches, thoracic extensions, controlled rotations\");\n  }\n\n  return { score: totalScore, recommendations };\n};\n\nexport const getExerciseRecommendations = (\n  targetMuscle: string,\n  jointHealth: JointStatus,\n  experienceLevel: string\n): ExerciseRecommendation[] => {\n  const exercises: { [key: string]: ExerciseRecommendation[] } = {\n    chest: [\n      {\n        name: \"Floor Press\",\n        difficulty: \"Beginner\",\n        description: \"Bench press performed from the floor to reduce shoulder stress\",\n        benefits: [\"Reduced shoulder stress\", \"Good chest activation\", \"Safe endpoint\"],\n        precautions: [\"Maintain neutral spine\", \"Keep elbows at 45 degrees\"]\n      },\n      {\n        name: \"Incline Push-Ups\",\n        difficulty: \"Beginner\",\n        description: \"Push-ups performed with hands elevated to reduce load\",\n        benefits: [\"Scalable difficulty\", \"Joint-friendly\", \"Natural movement pattern\"]\n      },\n      {\n        name: \"Cable Chest Press\",\n        difficulty: \"Intermediate\",\n        description: \"Standing chest press using cables for constant tension\",\n        benefits: [\"Controlled movement\", \"Variable angles\", \"Less joint stress\"]\n      }\n    ],\n    back: [\n      {\n        name: \"Supported Row\",\n        difficulty: \"Beginner\",\n        description: \"Row variation with chest supported to protect lower back\",\n        benefits: [\"Reduced lower back stress\", \"Isolated back work\", \"Good mind-muscle connection\"]\n      },\n      {\n        name: \"Single-Arm Cable Row\",\n        difficulty: \"Intermediate\",\n        description: \"Unilateral row using cable machine\",\n        benefits: [\"Core engagement\", \"Natural movement\", \"Even development\"]\n      }\n    ],\n    legs: [\n      {\n        name: \"Box Squat\",\n        difficulty: \"Beginner\",\n        description: \"Squat to box for controlled depth and reduced knee stress\",\n        benefits: [\"Controlled depth\", \"Reduced knee stress\", \"Power development\"]\n      },\n      {\n        name: \"Trap Bar Deadlift\",\n        difficulty: \"Intermediate\",\n        description: \"Deadlift variation with more upright posture\",\n        benefits: [\"Reduced lower back stress\", \"Natural movement pattern\", \"Heavy loading potential\"]\n      }\n    ]\n  };\n\n  let recommendations = exercises[targetMuscle] || [];\n\n  // Filter based on joint health and experience\n  recommendations = recommendations.filter(exercise => {\n    if (jointHealth.pain > 7) {\n      return exercise.difficulty === \"Beginner\";\n    }\n    if (experienceLevel === \"beginner\") {\n      return exercise.difficulty !== \"Advanced\";\n    }\n    return true;\n  });\n\n  return recommendations;\n};\n\nexport function calculateRecoveryNeeds(\n  age: number,\n  intensity: number,\n  volume: number,\n  sleep: number,\n  stress: number\n): {\n  recoveryDays: number;\n  recoveryFactors: string[];\n  recommendations: string[];\n} {\n  // Base recovery time (in days)\n  let recoveryDays = 1;\n\n  // Age factor\n  if (age >= 40 && age < 50) recoveryDays += 0.5;\n  else if (age >= 50 && age < 60) recoveryDays += 1;\n  else if (age >= 60) recoveryDays += 1.5;\n\n  // Intensity factor\n  if (intensity >= 8) recoveryDays += 1;\n  else if (intensity >= 6) recoveryDays += 0.5;\n\n  // Volume factor\n  if (volume >= 25) recoveryDays += 1;\n  else if (volume >= 15) recoveryDays += 0.5;\n\n  // Sleep quality factor\n  if (sleep <= 5) recoveryDays += 1;\n  else if (sleep <= 7) recoveryDays += 0.5;\n\n  // Stress factor\n  if (stress >= 8) recoveryDays += 1;\n  else if (stress >= 6) recoveryDays += 0.5;\n\n  const recoveryFactors = [];\n  const recommendations = [];\n\n  // Generate recovery factors\n  if (age >= 50) recoveryFactors.push(\"Age increases recovery needs\");\n  if (intensity >= 8) recoveryFactors.push(\"High intensity training\");\n  if (volume >= 20) recoveryFactors.push(\"High training volume\");\n  if (sleep <= 6) recoveryFactors.push(\"Suboptimal sleep quality\");\n  if (stress >= 7) recoveryFactors.push(\"Elevated stress levels\");\n\n  // Generate recommendations\n  if (sleep <= 6) recommendations.push(\"Prioritize sleep hygiene\");\n  if (stress >= 7) recommendations.push(\"Implement stress management techniques\");\n  if (intensity >= 8) recommendations.push(\"Consider reducing training intensity\");\n  if (volume >= 25) recommendations.push(\"Reduce training volume temporarily\");\n\n  return {\n    recoveryDays: Math.round(recoveryDays * 2) / 2, // Round to nearest 0.5\n    recoveryFactors,\n    recommendations\n  };\n}\n\nexport function calculateProgressiveOverload(\n  exercise: string,\n  currentWeight: number,\n  currentReps: number,\n  currentSets: number,\n  experience: string,\n  recovery: string\n): {\n  weeklyWeight: number;\n  weeklyReps: number;\n  weeklySets: number;\n  focusAreas: string[];\n  monthlyWeightIncrease: number;\n  monthlyVolumeIncrease: number;\n  monthlyCheckpoints: string[];\n  longTermGoals: string[];\n  deloadStrategy: string[];\n  safetyTips: string[];\n} {\n  // Calculate weekly progression based on experience level\n  let weightIncrement = 0;\n  let repIncrement = 0;\n  let setIncrement = 0;\n\n  switch (experience) {\n    case 'beginner':\n      weightIncrement = exercise === 'compound' ? 5 : 2.5;\n      repIncrement = 1;\n      setIncrement = 1;\n      break;\n    case 'intermediate':\n      weightIncrement = exercise === 'compound' ? 2.5 : 1.25;\n      repIncrement = 1;\n      setIncrement = 0;\n      break;\n    case 'advanced':\n      weightIncrement = exercise === 'compound' ? 1.25 : 0.5;\n      repIncrement = 0;\n      setIncrement = 0;\n      break;\n  }\n\n  // Adjust based on recovery capacity\n  if (recovery === 'low') {\n    weightIncrement *= 0.5;\n    repIncrement = 0;\n    setIncrement = 0;\n  } else if (recovery === 'medium') {\n    weightIncrement *= 0.75;\n  }\n\n  const weeklyWeight = currentWeight + weightIncrement;\n  const weeklyReps = currentReps + repIncrement;\n  const weeklySets = currentSets + setIncrement;\n\n  // Generate focus areas\n  const focusAreas = [\n    \"Perfect form execution\",\n    \"Controlled tempo\",\n    \"Full range of motion\",\n    experience === 'beginner' ? \"Building consistency\" : \"Maintaining intensity\"\n  ];\n\n  // Calculate monthly projections\n  const monthlyWeightIncrease = weightIncrement * 4;\n  const monthlyVolumeIncrease = 5; // 5% increase in total volume\n\n  // Generate monthly checkpoints\n  const monthlyCheckpoints = [\n    \"Review form on video\",\n    \"Assess recovery quality\",\n    \"Track strength progress\",\n    \"Evaluate joint health\"\n  ];\n\n  // Generate long-term goals\n  const longTermGoals = [\n    `Target weight: ${currentWeight + (weightIncrement * 12)}lbs`,\n    \"Maintain perfect form\",\n    \"Build work capacity\",\n    \"Improve mind-muscle connection\"\n  ];\n\n  // Generate deload strategy\n  const deloadStrategy = [\n    \"Reduce weight by 40-50%\",\n    \"Maintain rep range\",\n    \"Focus on form and tempo\",\n    \"One week every 6-8 weeks\"\n  ];\n\n  // Generate safety tips\n  const safetyTips = [\n    \"Always warm up properly\",\n    \"Stop if form deteriorates\",\n    \"Listen to your body\",\n    \"Track joint health\"\n  ];\n\n  return {\n    weeklyWeight,\n    weeklyReps,\n    weeklySets,\n    focusAreas,\n    monthlyWeightIncrease,\n    monthlyVolumeIncrease,\n    monthlyCheckpoints,\n    longTermGoals,\n    deloadStrategy,\n    safetyTips\n  };\n}\n"],"names":["assessMobility","shoulderMobility","hipMobility","ankleMobility","spinalMobility","totalScore","recommendations","getExerciseRecommendations","targetMuscle","jointHealth","experienceLevel","exercise","calculateRecoveryNeeds","age","intensity","volume","sleep","stress","recoveryDays","recoveryFactors","calculateProgressiveOverload","currentWeight","currentReps","currentSets","experience","recovery","weightIncrement","repIncrement","setIncrement","weeklyWeight","weeklyReps","weeklySets","focusAreas","monthlyWeightIncrease","monthlyVolumeIncrease","monthlyCheckpoints","longTermGoals"],"mappings":"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"}