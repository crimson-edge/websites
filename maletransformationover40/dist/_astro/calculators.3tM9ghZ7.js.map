{"version":3,"file":"calculators.3tM9ghZ7.js","sources":["../../src/utils/calculators.ts"],"sourcesContent":["// Body Composition Calculations\nexport const calculateMMI = (weight: number, height: number): number => {\n  // Muscle Mass Index = Weight (kg) / height (m)²\n  const weightInKg = weight * 0.453592;\n  const heightInM = height * 0.0254;\n  return weightInKg / (heightInM * heightInM);\n};\n\nexport const calculateWHR = (waist: number, hip: number): number => {\n  // Waist-to-Hip Ratio = Waist circumference / Hip circumference\n  return waist / hip;\n};\n\nexport const calculateBodyFat = (\n  waist: number,\n  neck: number,\n  height: number\n): number => {\n  // U.S. Navy Method for men\n  // 86.010 × log10(waist - neck) - 70.041 × log10(height) + 36.76\n  return (\n    86.01 * Math.log10(waist - neck) - 70.041 * Math.log10(height) + 36.76\n  );\n};\n\n// Training Volume Calculations\nexport const calculateWeeklyVolume = (\n  exerciseType: string,\n  experienceLevel: string\n): { minSets: number; maxSets: number } => {\n  const volumeRanges = {\n    beginner: {\n      compound: { min: 10, max: 15 },\n      isolation: { min: 8, max: 12 },\n    },\n    intermediate: {\n      compound: { min: 12, max: 18 },\n      isolation: { min: 10, max: 15 },\n    },\n    advanced: {\n      compound: { min: 15, max: 20 },\n      isolation: { min: 12, max: 18 },\n    },\n  };\n\n  const level = volumeRanges[experienceLevel as keyof typeof volumeRanges];\n  const type = level[exerciseType as keyof typeof level];\n  return { minSets: type.min, maxSets: type.max };\n};\n\n// Recovery Time Estimation\nexport const calculateRecoveryTime = (\n  age: number,\n  intensity: string,\n  sleepQuality: string,\n  stressLevel: string\n): number => {\n  let baseRecovery = 24; // Base recovery time in hours\n\n  // Age factor (increases recovery time as age increases)\n  const ageFactor = Math.max(1, (age - 40) / 10 + 1);\n  \n  // Intensity multiplier\n  const intensityMultipliers = {\n    low: 1,\n    moderate: 1.3,\n    high: 1.6,\n    very_high: 2\n  };\n\n  // Sleep quality factor\n  const sleepFactors = {\n    poor: 1.3,\n    fair: 1.1,\n    good: 1,\n    excellent: 0.9\n  };\n\n  // Stress level factor\n  const stressFactors = {\n    low: 1,\n    moderate: 1.2,\n    high: 1.4,\n    very_high: 1.6\n  };\n\n  return Math.round(\n    baseRecovery *\n    ageFactor *\n    intensityMultipliers[intensity as keyof typeof intensityMultipliers] *\n    sleepFactors[sleepQuality as keyof typeof sleepFactors] *\n    stressFactors[stressLevel as keyof typeof stressFactors]\n  );\n};\n\n// Nutrition Calculations\nexport const calculateProteinNeeds = (\n  weight: number,\n  activityLevel: string,\n  goal: string\n): { min: number; max: number } => {\n  // Protein needs in g/lb of body weight\n  const proteinFactors = {\n    maintenance: { min: 0.8, max: 1.0 },\n    fat_loss: { min: 1.0, max: 1.2 },\n    muscle_gain: { min: 1.2, max: 1.4 }\n  };\n\n  const factor = proteinFactors[goal as keyof typeof proteinFactors];\n  return {\n    min: Math.round(weight * factor.min),\n    max: Math.round(weight * factor.max)\n  };\n};\n\n// Strength Standards\nexport const calculateStrengthStandards = (\n  age: number,\n  weight: number,\n  exercise: string\n): {\n  beginner: number;\n  intermediate: number;\n  advanced: number;\n} => {\n  // Base multipliers for different exercises (as percentage of body weight)\n  const baseMultipliers = {\n    bench_press: { beginner: 0.8, intermediate: 1.2, advanced: 1.5 },\n    squat: { beginner: 1.0, intermediate: 1.5, advanced: 2.0 },\n    deadlift: { beginner: 1.2, intermediate: 1.8, advanced: 2.3 }\n  };\n\n  // Age adjustment factor (reduces expected strength by 1% per year over 40)\n  const ageAdjustment = Math.max(0.7, 1 - (age - 40) * 0.01);\n\n  const multipliers = baseMultipliers[exercise as keyof typeof baseMultipliers];\n  return {\n    beginner: Math.round(weight * multipliers.beginner * ageAdjustment),\n    intermediate: Math.round(weight * multipliers.intermediate * ageAdjustment),\n    advanced: Math.round(weight * multipliers.advanced * ageAdjustment)\n  };\n};\n"],"names":["calculateWeeklyVolume","exerciseType","experienceLevel","type","calculateRecoveryTime","age","intensity","sleepQuality","stressLevel","baseRecovery","ageFactor","intensityMultipliers","sleepFactors","stressFactors","calculateStrengthStandards","weight","exercise","baseMultipliers","ageAdjustment","multipliers"],"mappings":"AA0Ba,MAAAA,EAAwB,CACnCC,EACAC,IACyC,CAiBnC,MAAAC,EAhBe,CACnB,SAAU,CACR,SAAU,CAAE,IAAK,GAAI,IAAK,EAAG,EAC7B,UAAW,CAAE,IAAK,EAAG,IAAK,EAAG,CAC/B,EACA,aAAc,CACZ,SAAU,CAAE,IAAK,GAAI,IAAK,EAAG,EAC7B,UAAW,CAAE,IAAK,GAAI,IAAK,EAAG,CAChC,EACA,SAAU,CACR,SAAU,CAAE,IAAK,GAAI,IAAK,EAAG,EAC7B,UAAW,CAAE,IAAK,GAAI,IAAK,EAAG,CAAA,CAElC,EAE2BD,CAA4C,EACpDD,CAAkC,EACrD,MAAO,CAAE,QAASE,EAAK,IAAK,QAASA,EAAK,GAAI,CAChD,EAGaC,EAAwB,CACnCC,EACAC,EACAC,EACAC,IACW,CACX,IAAIC,EAAe,GAGnB,MAAMC,EAAY,KAAK,IAAI,GAAIL,EAAM,IAAM,GAAK,CAAC,EAG3CM,EAAuB,CAC3B,IAAK,EACL,SAAU,IACV,KAAM,IACN,UAAW,CACb,EAGMC,EAAe,CACnB,KAAM,IACN,KAAM,IACN,KAAM,EACN,UAAW,EACb,EAGMC,EAAgB,CACpB,IAAK,EACL,SAAU,IACV,KAAM,IACN,UAAW,GACb,EAEA,OAAO,KAAK,MACVJ,EACAC,EACAC,EAAqBL,CAA8C,EACnEM,EAAaL,CAAyC,EACtDM,EAAcL,CAAyC,CACzD,CACF,EAuBaM,EAA6B,CACxCT,EACAU,EACAC,IAKG,CAEH,MAAMC,EAAkB,CACtB,YAAa,CAAE,SAAU,GAAK,aAAc,IAAK,SAAU,GAAI,EAC/D,MAAO,CAAE,SAAU,EAAK,aAAc,IAAK,SAAU,CAAI,EACzD,SAAU,CAAE,SAAU,IAAK,aAAc,IAAK,SAAU,GAAI,CAC9D,EAGMC,EAAgB,KAAK,IAAI,GAAK,GAAKb,EAAM,IAAM,GAAI,EAEnDc,EAAcF,EAAgBD,CAAwC,EACrE,MAAA,CACL,SAAU,KAAK,MAAMD,EAASI,EAAY,SAAWD,CAAa,EAClE,aAAc,KAAK,MAAMH,EAASI,EAAY,aAAeD,CAAa,EAC1E,SAAU,KAAK,MAAMH,EAASI,EAAY,SAAWD,CAAa,CACpE,CACF"}